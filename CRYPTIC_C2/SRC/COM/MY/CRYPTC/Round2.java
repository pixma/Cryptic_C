/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Code_Window.java
 *
 * Created on 20 Jan, 2012, 3:01:28 PM
 */
package com.my.cryptC;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author rajiv
 */
public class Round2 extends javax.swing.JFrame {
    private static final long serialVersionUID = 1L;
    protected int delay = 1000;
    protected int max_min= 00;
    protected int max_sec= 1;
    protected String name;
    protected String id;
    protected String pcno=UsrDetail.pcNo.getText();
    static int flag =0;
    protected Timer coutdown;
    protected String selfile;
    protected Process procC,procR;
    protected boolean compileval;
    protected byte Cflag=1,fnum=0;
    protected Runtime rt;
    protected File tosave,ccfile;
    protected String line;
    protected boolean msgsent;
    protected FileWriter fstream;
    protected BufferedWriter out;
    protected BufferedReader br;
    protected int index;
     BufferedReader inFromUser;
     Socket clientSocket;
       DataOutputStream outToServer;
       BufferedReader inFromServer;
     String sentence;
  String modifiedSentence;
  
    
 ActionListener timer = new ActionListener() {
     int min= max_min;
     int sec = max_sec;
      
    public void actionPerformed(ActionEvent evt) {
          
       if(sec<10){
         time.setText(min+":0"+sec);   
        }
         if( min <10){
         time.setText("0"+min+":"+sec);   
        }
          if(sec<10 && min <10){
         time.setText("0"+min+":0"+sec);   
        }
        if(sec>=10 && min>=10){
         time.setText(min+":"+sec);   
        } 
         if(min==20 && sec==0){
                try {
                    // time.setText("00:00");
                    // ((Timer)evt.getSource()).stop();
                     coutdown.stop();
                      System.gc();
                     compile();
                     outToServer.writeBytes("----------------------------------------------------------------------\n");         
                     outToServer.writeBytes("Laqshya Id:- "+id+"\nSystem_no:- "+pcno+"\nFiles debugged:- "+filenum.getText()+"\nTime Taken:- "+time.getText());
                     outToServer.writeBytes("\n----------------------------------------------------------------------\n\n");
                  msgsent=true;
                     compr.setEnabled(false);
                     coder.setText(null);
                     coder.setEnabled(false);
                     loadfile.setEnabled(false);
                     fileselect.setEnabled(false);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
             JOptionPane.showMessageDialog(null,"Sorry "+name+" your time has expired ","Cryptic-C",JOptionPane.INFORMATION_MESSAGE);
                     
         }
         
          sec++;
         if(sec>59){
             //time.setText(min+":0"+sec);
             sec = 0;
              min++;
          }
      
    }
  };
 
  
    /** Creates new form Code_Window */
    public Round2() {
       try{
            initComponents();
             name=UsrDetail.usrname.getText();
             id=UsrDetail.usrid.getText();
            compr.setEnabled(false);
            //        isLastFile = false;
            tosave=new File("round2.c");
            Runtime r1= Runtime.getRuntime();
            coutdown= new Timer(delay,timer);
            clientSocket = new Socket("192.168.4.1", 6789);
            outToServer = new DataOutputStream(clientSocket.getOutputStream());
            Process p1;
            getSfiles();
            chnclft.setText("3");
            coutdown.start();
            try{
             p1=r1.exec("rm round2.c");
             p1.waitFor();
             p1=r1.exec("rm round2");
             p1.waitFor();
             //p1=r1.exec("rm ./Cfile/*");
            }catch(Exception e){}
       }catch(UnknownHostException ex){ex.printStackTrace();
}       catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        jScrollPane1 = new javax.swing.JScrollPane();
        coder = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        time = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        fileselect = new javax.swing.JComboBox();
        loadfile = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        filenum = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        compr = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Rslt = new javax.swing.JTextArea();
        passfile = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        chnclft = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(java.awt.Color.darkGray);
        setForeground(new java.awt.Color(1, 1, 1));
        setName("mainF"); // NOI18N
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setFont(new java.awt.Font("Arial", 1, 15));

        coder.setColumns(20);
        coder.setFont(new java.awt.Font("Arial", 0, 14));
        coder.setForeground(new java.awt.Color(61, 99, 253));
        coder.setRows(5);
        coder.setTabSize(4);
        coder.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                coderInputMethodTextChanged(evt);
            }
        });
        coder.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                coderPropertyChange(evt);
            }
        });
        coder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                coderKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(coder);

        outputArea.setBackground(new java.awt.Color(246, 242, 242));
        outputArea.setColumns(20);
        outputArea.setEditable(false);
        outputArea.setFont(new java.awt.Font("Ubuntu", 0, 16));
        outputArea.setRows(5);
        outputArea.setTabSize(4);
        jScrollPane2.setViewportView(outputArea);

        time.setFont(new java.awt.Font("Arial", 1, 72)); // NOI18N
        time.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        time.setText("00:00");
        time.setAlignmentX(0.5F);
        time.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        time.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                timePropertyChange(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 15));
        jLabel1.setText("Code Your Program Here");

        fileselect.setBackground(java.awt.Color.lightGray);
        fileselect.setFont(new java.awt.Font("Ubuntu", 1, 15));
        fileselect.setToolTipText("Select Your Files");
        fileselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileselectActionPerformed(evt);
            }
        });
        fileselect.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fileselectPropertyChange(evt);
            }
        });

        loadfile.setBackground(java.awt.Color.darkGray);
        loadfile.setFont(new java.awt.Font("Ubuntu", 1, 15));
        loadfile.setForeground(new java.awt.Color(254, 254, 254));
        loadfile.setText("Load");
        loadfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadfileActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14));
        jLabel3.setText("Select File:-");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel4.setText("Files Debugged:-");

        filenum.setFont(new java.awt.Font("Arial", 1, 36));
        filenum.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        filenum.setText("0");
        filenum.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 15));
        jLabel6.setText("OUTPUT WINDOW");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(224, 224, 224))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filenum, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(1, 1, 1)
                                        .addComponent(fileselect, 0, 171, Short.MAX_VALUE))
                                    .addComponent(time, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(loadfile, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(692, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addGap(231, 231, 231)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fileselect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loadfile))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filenum, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(172, 172, 172)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(263, 263, 263)
                    .addComponent(jLabel6)
                    .addContainerGap(400, Short.MAX_VALUE)))
        );

        compr.setBackground(java.awt.Color.darkGray);
        compr.setFont(new java.awt.Font("Ubuntu", 1, 15));
        compr.setForeground(new java.awt.Color(254, 254, 254));
        compr.setText("Compile");
        compr.setEnabled(false);
        compr.setName("comr"); // NOI18N
        compr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprActionPerformed(evt);
            }
        });

        exit.setBackground(java.awt.Color.darkGray);
        exit.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        exit.setForeground(new java.awt.Color(254, 254, 254));
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Result", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Arial", 1, 14))); // NOI18N

        Rslt.setColumns(20);
        Rslt.setEditable(false);
        Rslt.setFont(new java.awt.Font("Ubuntu", 1, 14));
        Rslt.setRows(5);
        Rslt.setTabSize(4);
        jScrollPane3.setViewportView(Rslt);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                .addContainerGap())
        );

        passfile.setBackground(java.awt.Color.darkGray);
        passfile.setFont(new java.awt.Font("Ubuntu", 1, 15));
        passfile.setForeground(new java.awt.Color(254, 254, 254));
        passfile.setText("Pass File");
        passfile.setEnabled(false);
        passfile.setName("comr"); // NOI18N
        passfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passfileActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Developed by: Rajiv Singh & Annim Banerjee");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 15));
        jLabel2.setText("Chance Left:-");

        chnclft.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        chnclft.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        chnclft.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(compr, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(passfile, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chnclft, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exit, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(compr, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(chnclft, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                    .addComponent(passfile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void compile(){
    try {
            outputArea.setText(null);
                rt = Runtime.getRuntime();
                int cval=0;
                fstream = new FileWriter(tosave);
                out = new BufferedWriter(fstream);
                      
                out.write(coder.getText());
                out.close();
                   	
                procC = rt.exec("gcc -o round2 round2.c -lm");
                cval=procC.waitFor();
		if(cval==0){  
                    
                    compileval=true;
                    procR = rt.exec("chmod +x hold.sh");
                    procR.waitFor();
                            
       
             }
                else if(cval !=0){
                    compileval=false;
                 
                        outputArea.append("Error in Code :P :D\n");
                       
                                             
                }
                    
            } catch (IOException | InterruptedException ex) {
                outputArea.append(ex.getMessage().toString());
            }
    
}
private void comprActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprActionPerformed
    outputArea.setText(null);
            Cflag++;
            chnclft.setText(String.valueOf(3-Cflag));
             System.gc();
            compile();
         try{   if(compileval){
          
                ccfile=new File("./Cfile/"+selfile);                
                fstream = new FileWriter(ccfile);
                out = new BufferedWriter(fstream);
                out.write(coder.getText());
                out.close();
                coder.setText(null);
               fnum++;
               filenum.setText(String.valueOf(fnum));
               compr.setEnabled(false);
                 //passfile.setEnabled(false);
                fileselect.removeItemAt(index);
                if(fileselect.getItemCount()==0){
                    coutdown.stop();
                        loadfile.setEnabled(false);
                        passfile.setEnabled(false);
                        coder.setEditable(false);
                        outToServer.writeBytes("----------------------------------------------------------------------\n");         
                        outToServer.writeBytes("Laqshya Id:- "+id+"\nSystem_no:- "+pcno+"\nFiles debugged:- "+filenum.getText()+"\nTime Taken:- "+time.getText());
                        outToServer.writeBytes("\n----------------------------------------------------------------------\n\n");
                   msgsent=true;
                        Rslt.append("You are done with Round 2.\nThankYou for Your Time. :)\nYou Killed bugs in " + filenum.getText() + " Files.\nBest of Luck!");
                }
                else if(fileselect.getItemCount()!=0){
                    loadfile.setEnabled(true);
                    passfile.setEnabled(false);
                    coder.setEditable(false);
                }
                                
            }
             if(!compileval && Cflag>2 ){
                coder.setText(null);
                compr.setEnabled(false);
                fileselect.removeItemAt(index);
                
                if(fileselect.getItemCount()==0){
                    coutdown.stop();
                    passfile.setEnabled(false);
                        loadfile.setEnabled(false);
                        coder.setEditable(false);
                        Rslt.append("You are done with Round 2.\nThankYou for Your Time. :)\nYou Killed bugs in " + filenum.getText() + " Files.\nBest of Luck!");
                       outToServer.writeBytes("----------------------------------------------------------------------\n");         
                       outToServer.writeBytes("Laqshya Id:- "+id+"\nSystem_no:- "+pcno+"\nFiles debugged:- "+filenum.getText()+"\nTime Taken:- "+time.getText());
                       outToServer.writeBytes("\n----------------------------------------------------------------------\n\n");
                  msgsent=true;
                }
                else if(fileselect.getItemCount()!=0){
                    loadfile.setEnabled(true);
                    passfile.setEnabled(false);
                    coder.setEditable(false);
                }
                 
            }
             
             
         } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }     
   
}//GEN-LAST:event_comprActionPerformed

    @SuppressWarnings("deprecation")
private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        int x =JOptionPane.showConfirmDialog(this,"This Operation is Reserved by the Auth. Please take the Instruction First!\n\nPress CANCLE if you are NOT SURE!","Cryptic-C",JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
        
    if(x==JOptionPane.YES_OPTION){  
            try {
                outToServer.writeBytes("----------------------------------------------------------------------\n");         
                outToServer.writeBytes("Laqshya Id:- "+id+"\nSystem_no:- "+pcno+"\nFiles debugged:- "+filenum.getText()+"\nTime Taken:- "+time.getText());
                outToServer.writeBytes("\n----------------------------------------------------------------------\n\n");
                              
                
            System.exit(0);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
    }
}//GEN-LAST:event_exitActionPerformed

private void coderPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_coderPropertyChange
    // TODO add your handling code here:
}//GEN-LAST:event_coderPropertyChange

private void coderInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_coderInputMethodTextChanged
    
     
    // TODO add your handling code here:
}//GEN-LAST:event_coderInputMethodTextChanged

private void coderKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_coderKeyTyped
     
      
}//GEN-LAST:event_coderKeyTyped
    @SuppressWarnings({"unchecked", "unchecked", "unchecked", "unchecked"})
private void getSfiles(){
  String dir= "./Sfile";
  File src =new File(dir);
  String srclst [] = src.list();
  for(String srcfile: srclst){
      fileselect.addItem(srcfile);
      //outputArea.append(srcfile+"\n");
  }
}
        
private void timePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_timePropertyChange
// TODO add your handling code hertem
    
  /*  String temp =time.getText();
    if(temp.equalsIgnoreCase("00:00"))
        
    */

}//GEN-LAST:event_timePropertyChange

private void fileselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileselectActionPerformed
             // TODO add your handling code here:
}//GEN-LAST:event_fileselectActionPerformed

private void fileselectPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fileselectPropertyChange

              // TODO add your handling code here:
}//GEN-LAST:event_fileselectPropertyChange

private void loadfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadfileActionPerformed
     try {
   index= fileselect.getSelectedIndex();
   selfile=fileselect.getSelectedItem().toString();
   String file="./Sfile/"+selfile;
   FileReader fr = new FileReader(file);
   BufferedReader reader = new BufferedReader(fr);
   coder.read(reader, "jTextArea1");
   Cflag=0;
   chnclft.setText("3");
   compr.setEnabled(true);
   coder.setEditable(true);
   passfile.setEnabled(true);
   loadfile.setEnabled(false);
   outputArea.setText("");
   
   
}
   catch (IOException ioe) {
   System.err.println(ioe);
  // System.exit(1);
}// TODO add your handling code here:
}//GEN-LAST:event_loadfileActionPerformed

private void passfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passfileActionPerformed
            fileselect.removeItemAt(index);
            coder.setText(null);
            coder.setEditable(false);
            compr.setEnabled(false);
            
                if(fileselect.getItemCount()==0){
            try {
                coutdown.stop();
                passfile.setEnabled(false);
                loadfile.setEnabled(false);
                Rslt.append("You are done with Round 2.\nThanku for Your Time. :)\nYou Killed bugs in " + filenum.getText() + " Files.\nBest of Luck!");
               outToServer.writeBytes("----------------------------------------------------------------------\n");         
                outToServer.writeBytes("Laqshya Id:- "+id+"\nSystem_no:- "+pcno+"\nFiles debugged:- "+filenum.getText()+"\nTime Taken:- "+time.getText());
                outToServer.writeBytes("\n----------------------------------------------------------------------\n\n");
                  msgsent=true;
            } catch (IOException ex) {
                ex.printStackTrace();
            }
                
                }
                else if(fileselect.getItemCount()!=0){
                    loadfile.setEnabled(true);
                    passfile.setEnabled(false);
                }// TODO add your handling code here:
}//GEN-LAST:event_passfileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Round2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Round2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Round2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Round2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Round2().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Rslt;
    private javax.swing.JLabel chnclft;
    private javax.swing.JTextArea coder;
    private javax.swing.JButton compr;
    private javax.swing.JButton exit;
    private javax.swing.JLabel filenum;
    private javax.swing.JComboBox fileselect;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton loadfile;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JButton passfile;
    private javax.swing.JLabel time;
    // End of variables declaration//GEN-END:variables
}
